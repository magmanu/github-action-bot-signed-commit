name: Test Action
on:
  pull_request:
    branches:
      - main

permissions:
  contents: write

jobs:
  test-action:
    runs-on: ubuntu-latest
    name: Commit with bot verified commit
    env:
      pr_branch: ${{ github.event.pull_request.head.ref }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - { test_type: existing_branch, ref_name: qa, should_create_branch: true } #should_create_branch defaults to true
          - { test_type: new_branch, should_create_branch: false } 
          - { test_type: new_branch, should_create_branch: true } 


    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.pr_branch }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create list of files to sign
        run: |
          git fetch origin qa
          echo "$(git diff --name-only origin/qa...HEAD)" > file_list.txt
          cat file_list.txt

      - name: Generate branch name
        if: ${{ matrix.test_type == 'new_branch' }}
        id: generate_branch_name
        run: |
          echo "Generating new branch name..."
          echo "qa-${{ github.run_id }}" | tee -a $GITHUB_OUTPUT

      - name: Test action
        id: test
        uses: ./
        continue-on-error: true
        with:
          TARGET_REF: ${{ matrix.ref_name || steps.generate_branch_name.outputs.branch_name }}
          FILE_LIST: file_list.txt
          SHOULD_CREATE_NEW_BRANCH: ${{ matrix.should_create_branch }}
      
      - name: Handle failure
        if: ${{ steps.test.outcome == 'failure' }}
        run: |
          # if test_type is new_branch and should_create_branch is false, we expect the action to fail
          if [[ "${{ matrix.test_type }}" == "new_branch" && "${{ matrix.should_create_branch }}" == "false" ]]; then
            echo "Expected failure for new branch without creation. Skipping validation."
            exit 0
          fi
          echo "Action failed as expected. Continuing with the workflow."
      
      - name: Validate commit
        if: ${{ steps.test.outcome != 'failure' }}
        env:
          GH_TOKEN: ${{ github.token }}
          SHA: ${{ steps.test.outputs.sha }}
          TARGET_REF: ${{ matrix.ref_name || steps.generate_branch_name.outputs.branch_name }}
        run: |
          # Cool off
          sleep 10

          # Get the latest commit SHA from the target branch
          latest_commit_sha=$(gh api repos/${{ github.repository }}/git/ref/heads/$TARGET_REF --jq '.object.sha')
          echo "Latest commit SHA on $TARGET_REF: $latest_commit_sha"
          
          if [[ "$latest_commit_sha" == "$SHA" ]]; then
            echo "The commit was succesfully pushed to the target ref."
          else
            echo "Failure to push the commit to the target ref."
            exit 1
          fi

          response=$(gh api \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/commits/$SHA)

          verified=$(echo "$response" | jq -r '.commit.verification.verified')
          reason=$(echo "$response" | jq -r '.commit.verification.reason')

          if [ "$verified" == "true" ]; then
            echo "Commit $SHA is verified."
          else
            echo "Commit $SHA is NOT verified. Reason: $reason"
          fi

      - id: should_trigger
        run: |
          echo "should_run=false" | tee -a $GITHUB_OUTPUT
            if git diff --name-only origin/main...HEAD | grep -qE 'action\.yaml|\.github/workflows/pr_action_docs\.yaml'; then
              echo "should_run=true" | tee -a $GITHUB_OUTPUT
            fi
          
      - name: Trigger workflow
        if: ${{ steps.should_trigger.outputs.should_run == 'true' }}
        uses: peter-evans/repository-dispatch@v3
        with:
          event-type: action_test
          client-payload: '{"ref": "${{ env.pr_branch }}"}'

